// Code generated by MockGen. DO NOT EDIT.
// Source: iTelegramApi.go

// Package apiMock is a generated GoMock package.
package apiMock

import (
	context "context"
	model "pathfinder-family/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockITelegramApi is a mock of ITelegramApi interface.
type MockITelegramApi struct {
	ctrl     *gomock.Controller
	recorder *MockITelegramApiMockRecorder
}

// MockITelegramApiMockRecorder is the mock recorder for MockITelegramApi.
type MockITelegramApiMockRecorder struct {
	mock *MockITelegramApi
}

// NewMockITelegramApi creates a new mock instance.
func NewMockITelegramApi(ctrl *gomock.Controller) *MockITelegramApi {
	mock := &MockITelegramApi{ctrl: ctrl}
	mock.recorder = &MockITelegramApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITelegramApi) EXPECT() *MockITelegramApiMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockITelegramApi) Send(ctx context.Context, request model.SendTelegramRequest) (*model.TelegramApiResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, request)
	ret0, _ := ret[0].(*model.TelegramApiResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockITelegramApiMockRecorder) Send(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockITelegramApi)(nil).Send), ctx, request)
}
