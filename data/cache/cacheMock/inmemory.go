// Code generated by MockGen. DO NOT EDIT.
// Source: iInMemory.go

// Package cacheMock is a generated GoMock package.
package cacheMock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIInMemory is a mock of IInMemory interface.
type MockIInMemory struct {
	ctrl     *gomock.Controller
	recorder *MockIInMemoryMockRecorder
}

// MockIInMemoryMockRecorder is the mock recorder for MockIInMemory.
type MockIInMemoryMockRecorder struct {
	mock *MockIInMemory
}

// NewMockIInMemory creates a new mock instance.
func NewMockIInMemory(ctrl *gomock.Controller) *MockIInMemory {
	mock := &MockIInMemory{ctrl: ctrl}
	mock.recorder = &MockIInMemoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIInMemory) EXPECT() *MockIInMemoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockIInMemory) Delete(key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", key)
}

// Delete indicates an expected call of Delete.
func (mr *MockIInMemoryMockRecorder) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIInMemory)(nil).Delete), key)
}

// Get mocks base method.
func (m *MockIInMemory) Get(key string) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockIInMemoryMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIInMemory)(nil).Get), key)
}

// Set mocks base method.
func (m *MockIInMemory) Set(key string, item interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", key, item)
}

// Set indicates an expected call of Set.
func (mr *MockIInMemoryMockRecorder) Set(key, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockIInMemory)(nil).Set), key, item)
}
