// Code generated by MockGen. DO NOT EDIT.
// Source: iPostgres.go

// Package dbMock is a generated GoMock package.
package dbMock

import (
	context "context"
	model "pathfinder-family/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
)

// MockIPostgres is a mock of IPostgres interface.
type MockIPostgres struct {
	ctrl     *gomock.Controller
	recorder *MockIPostgresMockRecorder
}

// MockIPostgresMockRecorder is the mock recorder for MockIPostgres.
type MockIPostgresMockRecorder struct {
	mock *MockIPostgres
}

// NewMockIPostgres creates a new mock instance.
func NewMockIPostgres(ctrl *gomock.Controller) *MockIPostgres {
	mock := &MockIPostgres{ctrl: ctrl}
	mock.recorder = &MockIPostgresMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPostgres) EXPECT() *MockIPostgresMockRecorder {
	return m.recorder
}

// AddDonate mocks base method.
func (m *MockIPostgres) AddDonate(ctx context.Context, request model.AddDonateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDonate", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDonate indicates an expected call of AddDonate.
func (mr *MockIPostgresMockRecorder) AddDonate(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDonate", reflect.TypeOf((*MockIPostgres)(nil).AddDonate), ctx, request)
}

// AddGoodInWaitingList mocks base method.
func (m *MockIPostgres) AddGoodInWaitingList(ctx context.Context, userId, goodId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGoodInWaitingList", ctx, userId, goodId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddGoodInWaitingList indicates an expected call of AddGoodInWaitingList.
func (mr *MockIPostgresMockRecorder) AddGoodInWaitingList(ctx, userId, goodId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGoodInWaitingList", reflect.TypeOf((*MockIPostgres)(nil).AddGoodInWaitingList), ctx, userId, goodId)
}

// AddNews mocks base method.
func (m *MockIPostgres) AddNews(ctx context.Context, request model.AddNewsRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNews", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNews indicates an expected call of AddNews.
func (mr *MockIPostgresMockRecorder) AddNews(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNews", reflect.TypeOf((*MockIPostgres)(nil).AddNews), ctx, request)
}

// AddUserFavourites mocks base method.
func (m *MockIPostgres) AddUserFavourites(ctx context.Context, userId int, guid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserFavourites", ctx, userId, guid)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserFavourites indicates an expected call of AddUserFavourites.
func (mr *MockIPostgresMockRecorder) AddUserFavourites(ctx, userId, guid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserFavourites", reflect.TypeOf((*MockIPostgres)(nil).AddUserFavourites), ctx, userId, guid)
}

// ChangeUserFavouritesItems mocks base method.
func (m *MockIPostgres) ChangeUserFavouritesItems(ctx context.Context, userId int, request model.ChangeUserFavouritesItemsRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserFavouritesItems", ctx, userId, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUserFavouritesItems indicates an expected call of ChangeUserFavouritesItems.
func (mr *MockIPostgresMockRecorder) ChangeUserFavouritesItems(ctx, userId, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserFavouritesItems", reflect.TypeOf((*MockIPostgres)(nil).ChangeUserFavouritesItems), ctx, userId, request)
}

// Close mocks base method.
func (m *MockIPostgres) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockIPostgresMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIPostgres)(nil).Close))
}

// DeletePushToken mocks base method.
func (m *MockIPostgres) DeletePushToken(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePushToken", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePushToken indicates an expected call of DeletePushToken.
func (mr *MockIPostgresMockRecorder) DeletePushToken(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePushToken", reflect.TypeOf((*MockIPostgres)(nil).DeletePushToken), ctx, id)
}

// DeleteUserFavourites mocks base method.
func (m *MockIPostgres) DeleteUserFavourites(ctx context.Context, userId int, guid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserFavourites", ctx, userId, guid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserFavourites indicates an expected call of DeleteUserFavourites.
func (mr *MockIPostgresMockRecorder) DeleteUserFavourites(ctx, userId, guid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserFavourites", reflect.TypeOf((*MockIPostgres)(nil).DeleteUserFavourites), ctx, userId, guid)
}

// GetAbilities mocks base method.
func (m *MockIPostgres) GetAbilities(ctx context.Context) ([]model.NameAlias, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAbilities", ctx)
	ret0, _ := ret[0].([]model.NameAlias)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAbilities indicates an expected call of GetAbilities.
func (mr *MockIPostgresMockRecorder) GetAbilities(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAbilities", reflect.TypeOf((*MockIPostgres)(nil).GetAbilities), ctx)
}

// GetAbilityInfo mocks base method.
func (m *MockIPostgres) GetAbilityInfo(ctx context.Context, abilityAlias string) (*model.AbilityInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAbilityInfo", ctx, abilityAlias)
	ret0, _ := ret[0].(*model.AbilityInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAbilityInfo indicates an expected call of GetAbilityInfo.
func (mr *MockIPostgresMockRecorder) GetAbilityInfo(ctx, abilityAlias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAbilityInfo", reflect.TypeOf((*MockIPostgres)(nil).GetAbilityInfo), ctx, abilityAlias)
}

// GetAfflictions mocks base method.
func (m *MockIPostgres) GetAfflictions(ctx context.Context) ([]model.Affliction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAfflictions", ctx)
	ret0, _ := ret[0].([]model.Affliction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAfflictions indicates an expected call of GetAfflictions.
func (mr *MockIPostgresMockRecorder) GetAfflictions(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAfflictions", reflect.TypeOf((*MockIPostgres)(nil).GetAfflictions), ctx)
}

// GetAllMagicItems mocks base method.
func (m *MockIPostgres) GetAllMagicItems(ctx context.Context) ([]model.MagicItemForList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMagicItems", ctx)
	ret0, _ := ret[0].([]model.MagicItemForList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMagicItems indicates an expected call of GetAllMagicItems.
func (mr *MockIPostgresMockRecorder) GetAllMagicItems(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMagicItems", reflect.TypeOf((*MockIPostgres)(nil).GetAllMagicItems), ctx)
}

// GetAnimalCompanions mocks base method.
func (m *MockIPostgres) GetAnimalCompanions(ctx context.Context) ([]model.AnimalCompanion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimalCompanions", ctx)
	ret0, _ := ret[0].([]model.AnimalCompanion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimalCompanions indicates an expected call of GetAnimalCompanions.
func (mr *MockIPostgresMockRecorder) GetAnimalCompanions(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimalCompanions", reflect.TypeOf((*MockIPostgres)(nil).GetAnimalCompanions), ctx)
}

// GetArchetypeInfo mocks base method.
func (m *MockIPostgres) GetArchetypeInfo(ctx context.Context, archetypeAlias string) (*model.ArchetypeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchetypeInfo", ctx, archetypeAlias)
	ret0, _ := ret[0].(*model.ArchetypeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArchetypeInfo indicates an expected call of GetArchetypeInfo.
func (mr *MockIPostgresMockRecorder) GetArchetypeInfo(ctx, archetypeAlias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchetypeInfo", reflect.TypeOf((*MockIPostgres)(nil).GetArchetypeInfo), ctx, archetypeAlias)
}

// GetArchetypes mocks base method.
func (m *MockIPostgres) GetArchetypes(ctx context.Context, classAlias *string) ([]model.ClassWithArchetypes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchetypes", ctx, classAlias)
	ret0, _ := ret[0].([]model.ClassWithArchetypes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArchetypes indicates an expected call of GetArchetypes.
func (mr *MockIPostgresMockRecorder) GetArchetypes(ctx, classAlias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchetypes", reflect.TypeOf((*MockIPostgres)(nil).GetArchetypes), ctx, classAlias)
}

// GetArmors mocks base method.
func (m *MockIPostgres) GetArmors(ctx context.Context) ([]model.Armor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArmors", ctx)
	ret0, _ := ret[0].([]model.Armor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArmors indicates an expected call of GetArmors.
func (mr *MockIPostgresMockRecorder) GetArmors(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArmors", reflect.TypeOf((*MockIPostgres)(nil).GetArmors), ctx)
}

// GetBeastInfo mocks base method.
func (m *MockIPostgres) GetBeastInfo(ctx context.Context, beastAlias string) (*model.BeastInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBeastInfo", ctx, beastAlias)
	ret0, _ := ret[0].(*model.BeastInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBeastInfo indicates an expected call of GetBeastInfo.
func (mr *MockIPostgresMockRecorder) GetBeastInfo(ctx, beastAlias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBeastInfo", reflect.TypeOf((*MockIPostgres)(nil).GetBeastInfo), ctx, beastAlias)
}

// GetBeasts mocks base method.
func (m *MockIPostgres) GetBeasts(ctx context.Context) ([]model.Beast, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBeasts", ctx)
	ret0, _ := ret[0].([]model.Beast)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBeasts indicates an expected call of GetBeasts.
func (mr *MockIPostgresMockRecorder) GetBeasts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBeasts", reflect.TypeOf((*MockIPostgres)(nil).GetBeasts), ctx)
}

// GetBloodlineInfo mocks base method.
func (m *MockIPostgres) GetBloodlineInfo(ctx context.Context, classAlias, bloodlineAlias string) (*model.BloodlineInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBloodlineInfo", ctx, classAlias, bloodlineAlias)
	ret0, _ := ret[0].(*model.BloodlineInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBloodlineInfo indicates an expected call of GetBloodlineInfo.
func (mr *MockIPostgresMockRecorder) GetBloodlineInfo(ctx, classAlias, bloodlineAlias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBloodlineInfo", reflect.TypeOf((*MockIPostgres)(nil).GetBloodlineInfo), ctx, classAlias, bloodlineAlias)
}

// GetBloodlineName mocks base method.
func (m *MockIPostgres) GetBloodlineName(ctx context.Context, classAlias, bloodlineAlias string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBloodlineName", ctx, classAlias, bloodlineAlias)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBloodlineName indicates an expected call of GetBloodlineName.
func (mr *MockIPostgresMockRecorder) GetBloodlineName(ctx, classAlias, bloodlineAlias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBloodlineName", reflect.TypeOf((*MockIPostgres)(nil).GetBloodlineName), ctx, classAlias, bloodlineAlias)
}

// GetBloodlines mocks base method.
func (m *MockIPostgres) GetBloodlines(ctx context.Context, classAlias string) ([]model.Bloodline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBloodlines", ctx, classAlias)
	ret0, _ := ret[0].([]model.Bloodline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBloodlines indicates an expected call of GetBloodlines.
func (mr *MockIPostgresMockRecorder) GetBloodlines(ctx, classAlias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBloodlines", reflect.TypeOf((*MockIPostgres)(nil).GetBloodlines), ctx, classAlias)
}

// GetBookInfo mocks base method.
func (m *MockIPostgres) GetBookInfo(ctx context.Context, bookAlias string) (*model.BookInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookInfo", ctx, bookAlias)
	ret0, _ := ret[0].(*model.BookInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookInfo indicates an expected call of GetBookInfo.
func (mr *MockIPostgresMockRecorder) GetBookInfo(ctx, bookAlias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookInfo", reflect.TypeOf((*MockIPostgres)(nil).GetBookInfo), ctx, bookAlias)
}

// GetBooks mocks base method.
func (m *MockIPostgres) GetBooks(ctx context.Context) ([]model.Books, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooks", ctx)
	ret0, _ := ret[0].([]model.Books)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooks indicates an expected call of GetBooks.
func (mr *MockIPostgresMockRecorder) GetBooks(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooks", reflect.TypeOf((*MockIPostgres)(nil).GetBooks), ctx)
}

// GetClassInfo mocks base method.
func (m *MockIPostgres) GetClassInfo(ctx context.Context, classAlias string) (*model.ClassInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClassInfo", ctx, classAlias)
	ret0, _ := ret[0].(*model.ClassInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClassInfo indicates an expected call of GetClassInfo.
func (mr *MockIPostgresMockRecorder) GetClassInfo(ctx, classAlias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassInfo", reflect.TypeOf((*MockIPostgres)(nil).GetClassInfo), ctx, classAlias)
}

// GetClasses mocks base method.
func (m *MockIPostgres) GetClasses(ctx context.Context) ([]model.Class, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClasses", ctx)
	ret0, _ := ret[0].([]model.Class)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClasses indicates an expected call of GetClasses.
func (mr *MockIPostgresMockRecorder) GetClasses(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClasses", reflect.TypeOf((*MockIPostgres)(nil).GetClasses), ctx)
}

// GetClient mocks base method.
func (m *MockIPostgres) GetClient() *sqlx.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(*sqlx.DB)
	return ret0
}

// GetClient indicates an expected call of GetClient.
func (mr *MockIPostgresMockRecorder) GetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockIPostgres)(nil).GetClient))
}

// GetDomainInfo mocks base method.
func (m *MockIPostgres) GetDomainInfo(ctx context.Context, domainType, domainAlias string) (*model.DomainInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainInfo", ctx, domainType, domainAlias)
	ret0, _ := ret[0].(*model.DomainInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainInfo indicates an expected call of GetDomainInfo.
func (mr *MockIPostgresMockRecorder) GetDomainInfo(ctx, domainType, domainAlias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainInfo", reflect.TypeOf((*MockIPostgres)(nil).GetDomainInfo), ctx, domainType, domainAlias)
}

// GetDomainName mocks base method.
func (m *MockIPostgres) GetDomainName(ctx context.Context, domainType, alias string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainName", ctx, domainType, alias)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainName indicates an expected call of GetDomainName.
func (mr *MockIPostgresMockRecorder) GetDomainName(ctx, domainType, alias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainName", reflect.TypeOf((*MockIPostgres)(nil).GetDomainName), ctx, domainType, alias)
}

// GetDomains mocks base method.
func (m *MockIPostgres) GetDomains(ctx context.Context) ([]model.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomains", ctx)
	ret0, _ := ret[0].([]model.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomains indicates an expected call of GetDomains.
func (mr *MockIPostgresMockRecorder) GetDomains(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomains", reflect.TypeOf((*MockIPostgres)(nil).GetDomains), ctx)
}

// GetFeatInfo mocks base method.
func (m *MockIPostgres) GetFeatInfo(ctx context.Context, featAlias string) (*model.FeatInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeatInfo", ctx, featAlias)
	ret0, _ := ret[0].(*model.FeatInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeatInfo indicates an expected call of GetFeatInfo.
func (mr *MockIPostgresMockRecorder) GetFeatInfo(ctx, featAlias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeatInfo", reflect.TypeOf((*MockIPostgres)(nil).GetFeatInfo), ctx, featAlias)
}

// GetFeats mocks base method.
func (m *MockIPostgres) GetFeats(ctx context.Context) ([]model.Feat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeats", ctx)
	ret0, _ := ret[0].([]model.Feat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeats indicates an expected call of GetFeats.
func (mr *MockIPostgresMockRecorder) GetFeats(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeats", reflect.TypeOf((*MockIPostgres)(nil).GetFeats), ctx)
}

// GetGods mocks base method.
func (m *MockIPostgres) GetGods(ctx context.Context) ([]model.God, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGods", ctx)
	ret0, _ := ret[0].([]model.God)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGods indicates an expected call of GetGods.
func (mr *MockIPostgresMockRecorder) GetGods(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGods", reflect.TypeOf((*MockIPostgres)(nil).GetGods), ctx)
}

// GetGoods mocks base method.
func (m *MockIPostgres) GetGoods(ctx context.Context, token *string) ([]model.Good, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGoods", ctx, token)
	ret0, _ := ret[0].([]model.Good)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGoods indicates an expected call of GetGoods.
func (mr *MockIPostgresMockRecorder) GetGoods(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGoods", reflect.TypeOf((*MockIPostgres)(nil).GetGoods), ctx, token)
}

// GetGoodsAndServices mocks base method.
func (m *MockIPostgres) GetGoodsAndServices(ctx context.Context) ([]model.GoodAndService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGoodsAndServices", ctx)
	ret0, _ := ret[0].([]model.GoodAndService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGoodsAndServices indicates an expected call of GetGoodsAndServices.
func (mr *MockIPostgresMockRecorder) GetGoodsAndServices(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGoodsAndServices", reflect.TypeOf((*MockIPostgres)(nil).GetGoodsAndServices), ctx)
}

// GetHaunts mocks base method.
func (m *MockIPostgres) GetHaunts(ctx context.Context) ([]model.Haunt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHaunts", ctx)
	ret0, _ := ret[0].([]model.Haunt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHaunts indicates an expected call of GetHaunts.
func (mr *MockIPostgresMockRecorder) GetHaunts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHaunts", reflect.TypeOf((*MockIPostgres)(nil).GetHaunts), ctx)
}

// GetMagicItemAbilitiesByTypes mocks base method.
func (m *MockIPostgres) GetMagicItemAbilitiesByTypes(ctx context.Context, types []string) ([]model.MagicItemAbility, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMagicItemAbilitiesByTypes", ctx, types)
	ret0, _ := ret[0].([]model.MagicItemAbility)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMagicItemAbilitiesByTypes indicates an expected call of GetMagicItemAbilitiesByTypes.
func (mr *MockIPostgresMockRecorder) GetMagicItemAbilitiesByTypes(ctx, types interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMagicItemAbilitiesByTypes", reflect.TypeOf((*MockIPostgres)(nil).GetMagicItemAbilitiesByTypes), ctx, types)
}

// GetMagicItemInfo mocks base method.
func (m *MockIPostgres) GetMagicItemInfo(ctx context.Context, magicItemAlias string) (*model.MagicItemInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMagicItemInfo", ctx, magicItemAlias)
	ret0, _ := ret[0].(*model.MagicItemInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMagicItemInfo indicates an expected call of GetMagicItemInfo.
func (mr *MockIPostgresMockRecorder) GetMagicItemInfo(ctx, magicItemAlias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMagicItemInfo", reflect.TypeOf((*MockIPostgres)(nil).GetMagicItemInfo), ctx, magicItemAlias)
}

// GetMagicItemsByTypes mocks base method.
func (m *MockIPostgres) GetMagicItemsByTypes(ctx context.Context, types []string) ([]model.MagicItemInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMagicItemsByTypes", ctx, types)
	ret0, _ := ret[0].([]model.MagicItemInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMagicItemsByTypes indicates an expected call of GetMagicItemsByTypes.
func (mr *MockIPostgresMockRecorder) GetMagicItemsByTypes(ctx, types interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMagicItemsByTypes", reflect.TypeOf((*MockIPostgres)(nil).GetMagicItemsByTypes), ctx, types)
}

// GetMonsterAbilities mocks base method.
func (m *MockIPostgres) GetMonsterAbilities(ctx context.Context) ([]model.MonsterAbility, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonsterAbilities", ctx)
	ret0, _ := ret[0].([]model.MonsterAbility)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonsterAbilities indicates an expected call of GetMonsterAbilities.
func (mr *MockIPostgresMockRecorder) GetMonsterAbilities(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonsterAbilities", reflect.TypeOf((*MockIPostgres)(nil).GetMonsterAbilities), ctx)
}

// GetMonstrousMounts mocks base method.
func (m *MockIPostgres) GetMonstrousMounts(ctx context.Context) ([]model.MonstrousMount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonstrousMounts", ctx)
	ret0, _ := ret[0].([]model.MonstrousMount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonstrousMounts indicates an expected call of GetMonstrousMounts.
func (mr *MockIPostgresMockRecorder) GetMonstrousMounts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonstrousMounts", reflect.TypeOf((*MockIPostgres)(nil).GetMonstrousMounts), ctx)
}

// GetNameByAlias mocks base method.
func (m *MockIPostgres) GetNameByAlias(ctx context.Context, table, alias string, withEng bool) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNameByAlias", ctx, table, alias, withEng)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNameByAlias indicates an expected call of GetNameByAlias.
func (mr *MockIPostgresMockRecorder) GetNameByAlias(ctx, table, alias, withEng interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNameByAlias", reflect.TypeOf((*MockIPostgres)(nil).GetNameByAlias), ctx, table, alias, withEng)
}

// GetNews mocks base method.
func (m *MockIPostgres) GetNews(ctx context.Context, offset, limit int, onlyActual bool) ([]model.News, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNews", ctx, offset, limit, onlyActual)
	ret0, _ := ret[0].([]model.News)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNews indicates an expected call of GetNews.
func (mr *MockIPostgresMockRecorder) GetNews(ctx, offset, limit, onlyActual interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNews", reflect.TypeOf((*MockIPostgres)(nil).GetNews), ctx, offset, limit, onlyActual)
}

// GetNpcInfo mocks base method.
func (m *MockIPostgres) GetNpcInfo(ctx context.Context, classAlias string) (*model.NpcInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNpcInfo", ctx, classAlias)
	ret0, _ := ret[0].(*model.NpcInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNpcInfo indicates an expected call of GetNpcInfo.
func (mr *MockIPostgresMockRecorder) GetNpcInfo(ctx, classAlias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNpcInfo", reflect.TypeOf((*MockIPostgres)(nil).GetNpcInfo), ctx, classAlias)
}

// GetNpcs mocks base method.
func (m *MockIPostgres) GetNpcs(ctx context.Context) ([]model.Class, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNpcs", ctx)
	ret0, _ := ret[0].([]model.Class)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNpcs indicates an expected call of GetNpcs.
func (mr *MockIPostgresMockRecorder) GetNpcs(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNpcs", reflect.TypeOf((*MockIPostgres)(nil).GetNpcs), ctx)
}

// GetOrderInfo mocks base method.
func (m *MockIPostgres) GetOrderInfo(ctx context.Context, bloodlineAlias string) (*model.OrderInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderInfo", ctx, bloodlineAlias)
	ret0, _ := ret[0].(*model.OrderInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderInfo indicates an expected call of GetOrderInfo.
func (mr *MockIPostgresMockRecorder) GetOrderInfo(ctx, bloodlineAlias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderInfo", reflect.TypeOf((*MockIPostgres)(nil).GetOrderInfo), ctx, bloodlineAlias)
}

// GetOrders mocks base method.
func (m *MockIPostgres) GetOrders(ctx context.Context) ([]model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", ctx)
	ret0, _ := ret[0].([]model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockIPostgresMockRecorder) GetOrders(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockIPostgres)(nil).GetOrders), ctx)
}

// GetPrestigeClassInfo mocks base method.
func (m *MockIPostgres) GetPrestigeClassInfo(ctx context.Context, classAlias string) (*model.PrestigeClassInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrestigeClassInfo", ctx, classAlias)
	ret0, _ := ret[0].(*model.PrestigeClassInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrestigeClassInfo indicates an expected call of GetPrestigeClassInfo.
func (mr *MockIPostgresMockRecorder) GetPrestigeClassInfo(ctx, classAlias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrestigeClassInfo", reflect.TypeOf((*MockIPostgres)(nil).GetPrestigeClassInfo), ctx, classAlias)
}

// GetPrestigeClasses mocks base method.
func (m *MockIPostgres) GetPrestigeClasses(ctx context.Context) ([]model.Class, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrestigeClasses", ctx)
	ret0, _ := ret[0].([]model.Class)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrestigeClasses indicates an expected call of GetPrestigeClasses.
func (mr *MockIPostgresMockRecorder) GetPrestigeClasses(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrestigeClasses", reflect.TypeOf((*MockIPostgres)(nil).GetPrestigeClasses), ctx)
}

// GetPushTokens mocks base method.
func (m *MockIPostgres) GetPushTokens(ctx context.Context) ([]model.PushToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPushTokens", ctx)
	ret0, _ := ret[0].([]model.PushToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPushTokens indicates an expected call of GetPushTokens.
func (mr *MockIPostgresMockRecorder) GetPushTokens(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPushTokens", reflect.TypeOf((*MockIPostgres)(nil).GetPushTokens), ctx)
}

// GetRaceInfo mocks base method.
func (m *MockIPostgres) GetRaceInfo(ctx context.Context, raceAlias string) (*model.RaceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRaceInfo", ctx, raceAlias)
	ret0, _ := ret[0].(*model.RaceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRaceInfo indicates an expected call of GetRaceInfo.
func (mr *MockIPostgresMockRecorder) GetRaceInfo(ctx, raceAlias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRaceInfo", reflect.TypeOf((*MockIPostgres)(nil).GetRaceInfo), ctx, raceAlias)
}

// GetRaces mocks base method.
func (m *MockIPostgres) GetRaces(ctx context.Context) ([]model.Race, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRaces", ctx)
	ret0, _ := ret[0].([]model.Race)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRaces indicates an expected call of GetRaces.
func (mr *MockIPostgresMockRecorder) GetRaces(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRaces", reflect.TypeOf((*MockIPostgres)(nil).GetRaces), ctx)
}

// GetSearchInfo mocks base method.
func (m *MockIPostgres) GetSearchInfo(ctx context.Context) ([]model.SearchInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSearchInfo", ctx)
	ret0, _ := ret[0].([]model.SearchInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSearchInfo indicates an expected call of GetSearchInfo.
func (mr *MockIPostgresMockRecorder) GetSearchInfo(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSearchInfo", reflect.TypeOf((*MockIPostgres)(nil).GetSearchInfo), ctx)
}

// GetSkillInfo mocks base method.
func (m *MockIPostgres) GetSkillInfo(ctx context.Context, skillAlias string) (*model.SkillInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSkillInfo", ctx, skillAlias)
	ret0, _ := ret[0].(*model.SkillInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSkillInfo indicates an expected call of GetSkillInfo.
func (mr *MockIPostgresMockRecorder) GetSkillInfo(ctx, skillAlias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSkillInfo", reflect.TypeOf((*MockIPostgres)(nil).GetSkillInfo), ctx, skillAlias)
}

// GetSkills mocks base method.
func (m *MockIPostgres) GetSkills(ctx context.Context) ([]model.SkillWithClasses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSkills", ctx)
	ret0, _ := ret[0].([]model.SkillWithClasses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSkills indicates an expected call of GetSkills.
func (mr *MockIPostgresMockRecorder) GetSkills(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSkills", reflect.TypeOf((*MockIPostgres)(nil).GetSkills), ctx)
}

// GetSkillsPerLvl mocks base method.
func (m *MockIPostgres) GetSkillsPerLvl(ctx context.Context) ([]model.SkillsPerLvlInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSkillsPerLvl", ctx)
	ret0, _ := ret[0].([]model.SkillsPerLvlInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSkillsPerLvl indicates an expected call of GetSkillsPerLvl.
func (mr *MockIPostgresMockRecorder) GetSkillsPerLvl(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSkillsPerLvl", reflect.TypeOf((*MockIPostgres)(nil).GetSkillsPerLvl), ctx)
}

// GetSpellInfo mocks base method.
func (m *MockIPostgres) GetSpellInfo(ctx context.Context, spellAlias string) (*model.SpellInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpellInfo", ctx, spellAlias)
	ret0, _ := ret[0].(*model.SpellInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpellInfo indicates an expected call of GetSpellInfo.
func (mr *MockIPostgresMockRecorder) GetSpellInfo(ctx, spellAlias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpellInfo", reflect.TypeOf((*MockIPostgres)(nil).GetSpellInfo), ctx, spellAlias)
}

// GetSpellSchoolInfo mocks base method.
func (m *MockIPostgres) GetSpellSchoolInfo(ctx context.Context, schoolAlias string) (*model.SchoolInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpellSchoolInfo", ctx, schoolAlias)
	ret0, _ := ret[0].(*model.SchoolInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpellSchoolInfo indicates an expected call of GetSpellSchoolInfo.
func (mr *MockIPostgresMockRecorder) GetSpellSchoolInfo(ctx, schoolAlias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpellSchoolInfo", reflect.TypeOf((*MockIPostgres)(nil).GetSpellSchoolInfo), ctx, schoolAlias)
}

// GetSpellSchools mocks base method.
func (m *MockIPostgres) GetSpellSchools(ctx context.Context) ([]model.School, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpellSchools", ctx)
	ret0, _ := ret[0].([]model.School)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpellSchools indicates an expected call of GetSpellSchools.
func (mr *MockIPostgresMockRecorder) GetSpellSchools(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpellSchools", reflect.TypeOf((*MockIPostgres)(nil).GetSpellSchools), ctx)
}

// GetSpells mocks base method.
func (m *MockIPostgres) GetSpells(ctx context.Context, classAlias *string) ([]model.Spell, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpells", ctx, classAlias)
	ret0, _ := ret[0].([]model.Spell)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpells indicates an expected call of GetSpells.
func (mr *MockIPostgresMockRecorder) GetSpells(ctx, classAlias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpells", reflect.TypeOf((*MockIPostgres)(nil).GetSpells), ctx, classAlias)
}

// GetThanks mocks base method.
func (m *MockIPostgres) GetThanks(ctx context.Context) ([]model.Thanks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThanks", ctx)
	ret0, _ := ret[0].([]model.Thanks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThanks indicates an expected call of GetThanks.
func (mr *MockIPostgresMockRecorder) GetThanks(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThanks", reflect.TypeOf((*MockIPostgres)(nil).GetThanks), ctx)
}

// GetTraits mocks base method.
func (m *MockIPostgres) GetTraits(ctx context.Context) ([]model.Trait, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTraits", ctx)
	ret0, _ := ret[0].([]model.Trait)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTraits indicates an expected call of GetTraits.
func (mr *MockIPostgresMockRecorder) GetTraits(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraits", reflect.TypeOf((*MockIPostgres)(nil).GetTraits), ctx)
}

// GetTranslations mocks base method.
func (m *MockIPostgres) GetTranslations(ctx context.Context, alias string) ([]model.Translation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTranslations", ctx, alias)
	ret0, _ := ret[0].([]model.Translation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTranslations indicates an expected call of GetTranslations.
func (mr *MockIPostgresMockRecorder) GetTranslations(ctx, alias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTranslations", reflect.TypeOf((*MockIPostgres)(nil).GetTranslations), ctx, alias)
}

// GetTraps mocks base method.
func (m *MockIPostgres) GetTraps(ctx context.Context) ([]model.Trap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTraps", ctx)
	ret0, _ := ret[0].([]model.Trap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTraps indicates an expected call of GetTraps.
func (mr *MockIPostgresMockRecorder) GetTraps(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraps", reflect.TypeOf((*MockIPostgres)(nil).GetTraps), ctx)
}

// GetUser mocks base method.
func (m *MockIPostgres) GetUser(ctx context.Context, token string) (*model.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, token)
	ret0, _ := ret[0].(*model.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockIPostgresMockRecorder) GetUser(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockIPostgres)(nil).GetUser), ctx, token)
}

// GetUserFavourites mocks base method.
func (m *MockIPostgres) GetUserFavourites(ctx context.Context, userId int) ([]model.Favourites, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFavourites", ctx, userId)
	ret0, _ := ret[0].([]model.Favourites)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFavourites indicates an expected call of GetUserFavourites.
func (mr *MockIPostgresMockRecorder) GetUserFavourites(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFavourites", reflect.TypeOf((*MockIPostgres)(nil).GetUserFavourites), ctx, userId)
}

// GetWeapons mocks base method.
func (m *MockIPostgres) GetWeapons(ctx context.Context) ([]model.Weapon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeapons", ctx)
	ret0, _ := ret[0].([]model.Weapon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeapons indicates an expected call of GetWeapons.
func (mr *MockIPostgresMockRecorder) GetWeapons(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeapons", reflect.TypeOf((*MockIPostgres)(nil).GetWeapons), ctx)
}

// Logout mocks base method.
func (m *MockIPostgres) Logout(ctx context.Context, userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockIPostgresMockRecorder) Logout(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockIPostgres)(nil).Logout), ctx, userId)
}

// RenameUserFavourites mocks base method.
func (m *MockIPostgres) RenameUserFavourites(ctx context.Context, userId int, request model.RenameUserFavouritesRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameUserFavourites", ctx, userId, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameUserFavourites indicates an expected call of RenameUserFavourites.
func (mr *MockIPostgresMockRecorder) RenameUserFavourites(ctx, userId, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameUserFavourites", reflect.TypeOf((*MockIPostgres)(nil).RenameUserFavourites), ctx, userId, request)
}

// SendFeedback mocks base method.
func (m *MockIPostgres) SendFeedback(ctx context.Context, theme string, email *string, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendFeedback", ctx, theme, email, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendFeedback indicates an expected call of SendFeedback.
func (mr *MockIPostgresMockRecorder) SendFeedback(ctx, theme, email, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendFeedback", reflect.TypeOf((*MockIPostgres)(nil).SendFeedback), ctx, theme, email, message)
}

// UserAuth mocks base method.
func (m *MockIPostgres) UserAuth(ctx context.Context, request model.UserAuthRequest) (*model.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserAuth", ctx, request)
	ret0, _ := ret[0].(*model.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserAuth indicates an expected call of UserAuth.
func (mr *MockIPostgresMockRecorder) UserAuth(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAuth", reflect.TypeOf((*MockIPostgres)(nil).UserAuth), ctx, request)
}

// UserChangeData mocks base method.
func (m *MockIPostgres) UserChangeData(ctx context.Context, userId int, request model.UserChangeDataRequest) (*model.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserChangeData", ctx, userId, request)
	ret0, _ := ret[0].(*model.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserChangeData indicates an expected call of UserChangeData.
func (mr *MockIPostgresMockRecorder) UserChangeData(ctx, userId, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserChangeData", reflect.TypeOf((*MockIPostgres)(nil).UserChangeData), ctx, userId, request)
}

// UserRegister mocks base method.
func (m *MockIPostgres) UserRegister(ctx context.Context, request model.UserRegisterRequest) (*model.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRegister", ctx, request)
	ret0, _ := ret[0].(*model.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserRegister indicates an expected call of UserRegister.
func (mr *MockIPostgresMockRecorder) UserRegister(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRegister", reflect.TypeOf((*MockIPostgres)(nil).UserRegister), ctx, request)
}

// UserResetPassword mocks base method.
func (m *MockIPostgres) UserResetPassword(ctx context.Context, request model.UserResetPasswordRequest, password string) (*model.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserResetPassword", ctx, request, password)
	ret0, _ := ret[0].(*model.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserResetPassword indicates an expected call of UserResetPassword.
func (mr *MockIPostgresMockRecorder) UserResetPassword(ctx, request, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserResetPassword", reflect.TypeOf((*MockIPostgres)(nil).UserResetPassword), ctx, request, password)
}
