// Code generated by MockGen. DO NOT EDIT.
// Source: iEmailService.go

// Package serviceMock is a generated GoMock package.
package serviceMock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIEmailService is a mock of IEmailService interface.
type MockIEmailService struct {
	ctrl     *gomock.Controller
	recorder *MockIEmailServiceMockRecorder
}

// MockIEmailServiceMockRecorder is the mock recorder for MockIEmailService.
type MockIEmailServiceMockRecorder struct {
	mock *MockIEmailService
}

// NewMockIEmailService creates a new mock instance.
func NewMockIEmailService(ctrl *gomock.Controller) *MockIEmailService {
	mock := &MockIEmailService{ctrl: ctrl}
	mock.recorder = &MockIEmailServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEmailService) EXPECT() *MockIEmailServiceMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockIEmailService) SendEmail(ctx context.Context, email, body string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", ctx, email, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockIEmailServiceMockRecorder) SendEmail(ctx, email, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockIEmailService)(nil).SendEmail), ctx, email, body)
}
